# -*- coding: utf-8 -*-
"""
Created on Wed Dec 22 07:20:08 2021

@author: GisUser
"""

from arcgis.gis import GIS
from arcgis.geometry import project, areas_and_lengths, lengths,distance
from arcgis.features import FeatureLayer,FeatureLayerCollection
import numpy as np
import pandas as pd
import os
from arcgis.geometry import Geometry
from arcgis.features import GeoAccessor
from arcgis.geometry import BaseGeometry
from arcgis.geometry import Geometry
#from arcgis.geometry import LengthUnits, AreaUnits
from statistics import mean
from geopy import distance
import json
import folium
from arcgis.geometry.functions import union, intersect, difference, generalize, buffer, relation
import jsons

sdf = pd.DataFrame.spatial.from_featureclass("C:\\Users\\GisUser\\Downloads\\tl_2010_23_state10\\tl_2010_23_state10.shp")

"""
the following below: indicaters the SCCWRP coordinates,
gathers general coordinates of the shapefile, 
separates the x and y coordinates into separate columns,
creates a dataframe from the longitude and latitude (DF2) ,
creates a spatial dataframe from the points created in DF2 (DF3),
calculates distance from the general LAT/LONG points from the SCCWRP coordinates,
and calulctaes this in miles. The distances calculated is added as a column in DF3.
"""

sccwrp_coords = (33.707, -117.913)
tmp = eval(sdf['SHAPE'].iloc[0].JSON).get('rings')[0]
x = [x[0] for x in tmp]
y = [y[-1] for y in tmp]
df2 = pd.DataFrame(tmp, columns=['LON','LAT'])
df3 = pd.DataFrame.spatial.from_xy(df2, x_column='LON',y_column='LAT',sr=4326)
df3['dist_from_sccwrp'] = df3.apply(
    lambda row:
    distance.distance(sccwrp_coords, (row['LAT'],row['LON'])).miles,
    axis = 1
)
test_mean=df3["dist_from_sccwrp"].mean()


"""
The following below creates a class object from the centroid of the indicated shapefile.
This centroid will be used to create a polyline on the outputed map.
"""

class A(object):
    def __init__(self):
        self.x = [x[0] for x in sdf['SHAPE'].geom.centroid]
        self.y = [y[1] for y in sdf['SHAPE'].geom.centroid]
        
        def __iter__(self):
            iters = dict((x,y) for x,y in A.__dict__.items() if x[:2] != '__')
            
            iters.update(self.__dict__)
            
            for x,y in iters.items():
                yield x,y
a = A()

jsons.dump(a)
#a,x, a.y
a.x, a.y

""" 
The Following creates a list from the outputed class objects generated by the centroid of the shapefile.
The list is then 'flattened' to remove the square brackets so that the coordinate points can be applied to the folium 
PolyLine built-in function.
"""

coord = [a.x,a.y]
flattened = [] 
for sublist in coord: 
    for val in sublist: 
        flattened.append(val)
flattened[0],flattened[1]


"""
The following below has the folium map which indicates average distance from the shapefile to SCCWRP.
It also has an indicated dashed line from the shapefile to SCCWRP.
"""

map = folium.Map(location=[41.9,-97.3], zoom_start = 4)

#map
loc = [(flattened[1],flattened[0]),(33.707,-117.913)]


#sdf1 = pd.DataFrame.spatial.from_featureclass("C:\\Users\\GisUser\\Downloads\\tl_2010_23_state10\\tl_2010_23_state10.shp")


#sdf1.head()

folium.Marker([33.697900,-117.920720],
              popup='SCCWRP',
              icon=folium.Icon(color='green')
             ).add_to(map)
#for i in sdf[['SHAPE']].iloc[0].values.JSON:
    #folium.PolyLine(locations=polyline.decode(i['SHAPE'].iloc[0].values.JSON)).add_to(map)
#folium.GeoJson(data=sdf["SHAPE"]).add_to(map)
geo_j=folium.GeoJson(data=sdf['SHAPE'].iloc[0].as_shapely, style_function=lambda x: {'fillColor': 'orange'}).add_to(map)
folium.PolyLine(loc,color='red',dash_array='10').add_to(map)
#folium.Popup(sdf['NAME10']).add_to(geo_j)
print(f'The Average distance between SCCWRP and your uploaded shapefile is: {test_mean} in miles.')
geo_j.add_to(map)
map



